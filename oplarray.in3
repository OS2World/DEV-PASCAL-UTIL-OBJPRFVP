{*********************************************************}
{*                  OPLARRAY.IN3 1.30                    *}
{*     Copyright (c) TurboPower Software 1987, 1992.     *}
{*                 All rights reserved.                  *}
{*********************************************************}

{implementation for Virtual Arrays}

const
  NotInRAM = $FFFFFFFF;          {Flag that a page is not currently in RAM}

type

  {Data storage}
  VDataPage = array[0..MaxHeapBlock] of Byte;

  {Descriptor of a page kept in RAM}
  VPageRec =
    record
      PageNum : Word;        {Index into disk pointer table}
      LRU : Word;            {Quasi-time when page last used}
      Used : Boolean;        {True when page is loaded with data}
      Dirty : Boolean;       {True when RAM page differs from disk page}
      Data : VDataPage;       {Actual data for page}
    end;
  VPageRecPtr = ^VPageRec;

  TpVArrayRec =
    record
      RamPages : ^RamPageIndex; {Points to pages of data in RAM}
      RamIndex : ^RamPageMap; {Index of pages currently in RAM}
      DiskIndex : ^DiskPageMap; {Index of pages on disk}
      PagesInRam : Word;     {Number of pages in RAM}
      Header : VArrayHeader;  {Descriptor of array configuration}
      F : file;              {File variable}
      Opened : Boolean;      {True when file open}
      LRUcount : Word;       {Current quasi-time}
      ArrayFileName : String;
      BytesHeapToUse : Word;
    end;
  TpVArrayInternal = ^TpVArrayRec;

  function Flush(var F : file) : Boolean;
    {-Flush DOS file buffers}
{$IFDEF VirtualPascal}
  Var
    Rc : Longint;
  begin
    rc := SysFileFlushBuffers( FileRec( F ).Handle);
    Flush := ( rc = 0 );
  end;
{$ELSE}
  var
    handle : Word absolute F;
    regs : registers;
  begin
    Flush := False;
    with regs do begin
      ah := $45;
      bx := handle;
      msdos(regs);
      if Odd(flags) then
        Exit;
      bx := ax;
      ah := $3E;
      msdos(regs);
      if Odd(Flags) then
        Exit;
    end;
  end;
{$ENDIF}

  function VirtualArray.RangeError(Row, Col : Word) : Boolean;
    {-Check for addressing range errors}
  begin
    {begin !!.03}
    with TpVArrayInternal(Internal)^.Header do
      RangeError := (Row >= Dimension.dRows) or (Col >= Dimension.dCols);
    {end !!.03}
  end;

  function WriteIndex(A : VirtualArrayPtr) : Boolean;
    {-Write the current header and page index to disk}
  var
    I, Bytes : {$IFDEF VirtualPascal} LongInt {$ELSE} Word {$ENDIF};
    DiskIndexSize : Word;
    SaveID : String[6];             {!!.03}
    SaveNext : LongInt;             {!!.03}
  begin
    WriteIndex := False;
    with A^, TpVArrayInternal(Internal)^ do begin
      if not Opened then
        Exit;
      Reset(F, 1);
      if ByteFlagIsSet(lFlags, lTpVArrayFormat) then begin  {begin !!.03}
        SaveID := Header.ID;
        SaveNext := Header.NextAvail;
        OldVArrayHeader(Header).ID := VArrayID;
        OldVArrayHeader(Header).NextAvail := SaveNext;
      end;                                                  {end !!.03}
      BlockWrite(F, Header, SizeOf(VArrayHeader), Bytes);
      if ByteFlagIsSet(lFlags, lTpVArrayFormat) then begin  {begin !!.03}
        Header.NextAvail := SaveNext;
        Header.ID := SaveID;
      end;                                                  {end !!.03}
      I := IoResult;
      if Bytes <> SizeOf(VArrayHeader) then
        I := ecDeviceWrite;
      if I <> 0 then begin
        Error(epNonFatal+I);                               {!!.03}
        Exit;
      end;
      DiskIndexSize := SizeOf(LongInt)*Header.PageCount;
      BlockWrite(F, DiskIndex^, DiskIndexSize, Bytes);
      I := IoResult;
      if Bytes <> DiskIndexSize then
        I := ecDeviceWrite;
      if I <> 0 then begin
        Error(epNonFatal+I);                               {!!.03}
        Exit;
      end;
    end;
    WriteIndex := True;
  end;

  procedure InitRamIndex(A : VirtualArrayPtr);
    {-Initialize the RAM page index}
  var
    P : Word;
  begin
    with A^, TpVArrayInternal(Internal)^, Header do begin
      {Mark all pages as not in RAM}
      FillChar(RamIndex^, SizeOf(Word)*PageCount, $FF);

      {Initialize each in-RAM page descriptor}
      for P := 0 to Pred(PagesInRam) do
        with RamPages^[P]^ do begin
          PageNum := 0;
          LRU := 0;
          Used := False;
          Dirty := False;
        end;
    end;
  end;

  function WritePage(PIR, Pnum : Word; A : VirtualArrayPtr) : Boolean;
    {-Write from RAM page PIR to disk page Pnum}
  var
    I, Bytes : {$IFDEF VirtualPascal} LongInt {$ELSE} Word {$ENDIF};
  begin
    WritePage := False;
    with A^, TpVArrayInternal(Internal)^, Header do begin
      {Allocate disk space for page if needed}
      if DiskIndex^[Pnum] = 00 then begin
        DiskIndex^[Pnum] := NextAvail;
        Inc(NextAvail, PageSize);
        {Update file image of index immediately if desired}
        if ByteFlagIsSet(lFlags,lKeepDiskCurrent) then
          if not WriteIndex(A) then
            Exit;
      end;

      {Seek and write}
      Seek(F, DiskIndex^[Pnum]);
      BlockWrite(F, RamPages^[PIR]^.Data, PageSize, Bytes);
      I := IoResult;
      if (I = 0) and (Bytes <> PageSize) then
        I := ecDeviceWrite;
      if I <> 0 then begin
        Error(epNonFatal+I);                             {!!.03}
        Exit;
      end;

      {Page is no longer dirty}
      RamPages^[PIR]^.Dirty := False;

      {Flush DOS file buffers if requested}
      if ByteFlagIsSet(lFlags,lKeepDiskCurrent) then
        if not Flush(F) then begin
          Error(epNonFatal+ecFlushError);
          Exit;
        end;
    end;
    WritePage := True;
  end;

  function GetPage(Pnum : Word; A : VirtualArrayPtr) : Word;
    {-Read disk page into RAM and return page number there}
  var
    I, P : Word;
    PIR : Word;
    MinLRU : Word;
    Bytes : {$IFDEF VirtualPascal} LongInt {$ELSE} Word {$ENDIF};
    PageUsed : Boolean;
  begin
    with A^, TpVArrayInternal(Internal)^, Header do begin

      {Find the next unused or oldest page in RAM}
      MinLRU := $FFFF;
      P := 0;
      PIR := 0;
      PageUsed := True;

      while P < PagesInRam do begin
        with RamPages^[P]^ do
          if not(Used) then begin
            PIR := P;
            PageUsed := False;
            {Force exit from loop}
            P := PagesInRam;
          end else if LRU < MinLRU then begin
            PIR := P;
            MinLRU := LRU;
          end;
        Inc(P);
      end;

      with RamPages^[PIR]^ do begin

        if PageUsed then begin
          {A previous page was in this location}
          if Dirty then begin
            if not WritePage(PIR, PageNum, A) then
              Exit;
          end;
          {Indicate that the page is no longer in RAM}
          RamIndex^[PageNum] := NotInRAM;
        end;

        {Read in the new page}
        if DiskIndex^[Pnum] <> 00 then begin
          {There is already data stored on disk}
          Seek(F, DiskIndex^[Pnum]);
          BlockRead(F, Data, PageSize, Bytes);
          I := IoResult;
          if Bytes <> PageSize then
            I := ecDeviceRead;
          if I <> 0 then begin
            Error(epNonFatal+I);                           {!!.03}
            Exit;
          end;
        end;

        {Indicate that the new page is in RAM}
        RamIndex^[Pnum] := PIR;

        {Update page flags}
        Used := True;
        Dirty := False;
        PageNum := Pnum;

      end;                   {With RamPages^[PIR]^}
    end;                     {With AP^, Header}

    {Return the page number where the data was loaded}
    GetPage := PIR;
  end;

function VArrayAddress(H : VArrayHeader; R, C : Word) : LongInt;
  {-Return the page parameters for a given row and column}
{$IFDEF VirtualPascal}
var
  POR, PR, POC, PC, PNum, POfs : Word;
begin
  VArrayAddress:=0;
  POR:=R MOD H.RowsInPage;
  PR:=R DIV H.RowsInPage;
  POC:=C MOD H.ColsInPage;
  PC:=C DIV H.ColsInPage;
  PNum:=PR+H.PagesDown*PC;
  POfs:=H.ElSize*(POR+H.RowsInPage*POC);
  VArrayAddress:=(LongInt(PNum) SHL 16)+POfs;
end;
{$ELSE}
Inline(
  $5B/                   {  pop bx                    ;save column in bx}
  $58/                   {  pop ax                    ;save row in ax}
  $5F/                   {  pop di                    ;offset of array header}
  $07/                   {  pop es                    ;segment of array header}
  $31/$D2/               {  xor dx,dx                 ;prepare to divide}
  $26/                   {  es:}
  $F7/$75/<vRPPOFS/      {  div word ptr [di+<vRPPOfs] ;divide by RowsInPage (POR in DX, PR in AX)}
  $89/$D1/               {  mov cx,dx                 ;save POR in cx}
  $89/$C6/               {  mov si,ax                 ;save PR in si}
  $89/$D8/               {  mov ax,bx                 ;col into ax}
  $31/$D2/               {  xor dx,dx                 ;prepare to divide}
  $26/                   {  es:}
  $F7/$75/<vCPPOFS/      {  div word ptr [di+<vCPPOfs] ;divide by ColsInPage (POC in DX, PC in AX)}
  $89/$C3/               {  mov bx,ax                 ;save PC in BX}
  $26/                   {  es:}
  $8B/$45/<vPDOFS/       {  mov ax,[di+<vPDOfs]        ;get PagesDown in AX}
  $52/                   {  push dx                   ;save POC a moment}
  $F7/$E3/               {  mul bx                    ;PagesDown*PC}
  $01/$F0/               {  add ax,si                 ;Pnum = PR+PagesDown*PC}
  $89/$C6/               {  mov si,ax                 ;Store Pnum in SI}
  $58/                   {  pop ax                    ;get POC back}
  $26/                   {  es:}
  $F7/$65/<vRPPOFS/      {  mul word ptr [di+<vRPPOfs] ;RowsPerPage*POC}
  $01/$C8/               {  add ax,cx                 ;POR+RowsPerPage*PO}
  $26/                   {  es:}
  $F7/$65/<vESOFS/       {  mul word ptr [di+<vESOfs]  ;ElSize*(POR+RowsPerPage*POC)}
                         {                            ;POfs in AX}
  $89/$F2);              {  mov dx,si                 ;PNum in DX}
{$ENDIF}

  function ChangesWereWritten(A : VirtualArrayPtr) : Boolean;
    {-Write any changed pages and return true if any were written}
  var
    PIR : Word;
  begin
    ChangesWereWritten := False;
    with A^,TpVArrayInternal(Internal)^  do
      for PIR := 0 to Pred(PagesInRam) do
        with RamPages^[PIR]^ do
          if Dirty then begin
            if not WritePage(PIR, PageNum, A) then
              Exit;
            ChangesWereWritten := True;
          end;
  end;

  procedure VirtualArray.FlushA;
    {-Update the disk image of the array}
  var
    Changed : Boolean;
  begin
    with TpVArrayInternal(Internal)^ do begin
      if not Opened then
        Exit;
      {Write any changed pages}
      Changed := ChangesWereWritten(@Self);
      {if not(ByteFlagIsSet(lFlags,lKeepDiskCurrent)) then}   {!!.10}
        {Update the index if WritePage didn't already do so}
        if not WriteIndex(@Self) then
          Exit;
      if Changed or not(ByteFlagIsSet(lFlags,lKeepDiskCurrent)) then
        {Assure DOS buffers are flushed}
        if not Flush(F) then
          Error(epNonFatal+ecFlushError);
    end;
  end;

  procedure ResetLRU(A : VirtualArrayPtr);
    {-Reset the LRU values for all pages in RAM}
  var
    P : Word;
  begin
    with A^,TpVArrayInternal(Internal)^ do
      for P := 0 to Pred(PagesInRam) do
        RamPages^[P]^.LRU := 0;
  end;

  procedure VirtualArray.RetA(Row, Col : Word; var Value);
    {-Return the value of A[R,C]}
  var
    PIR : Word;
    P : Word;
    L : Longint;
  begin
    with TpVArrayInternal(Internal)^, Header do begin
      {Compute page number and offset into page - returned in globals}
      L := VArrayAddress(Header, Row, Col);

      {Is page in RAM? If not, put it there now}
      PIR := RamIndex^[ArrayLI(L).Pnum];
      if PIR = NotInRAM then
        PIR := GetPage(ArrayLI(L).Pnum, @Self);

      {Update quasi-time}
      Inc(LRUcount);
      if LRUcount = 0 then
        ResetLRU(@Self);

      {Update LRU for this page, and pass back data value}
      with RamPages^[PIR]^ do begin
        LRU := LRUcount;
        Move(Data[ArrayLI(L).Pofs], Value, ElSize);
      end;
    end;
  end;

  procedure VirtualArray.SetA(Row, Col : Word; var Value);
    {-Set array element A[R,C] to value}
  var
    PIR : Word;
    P : Word;
    L : LongInt;
  begin
    with TpVArrayInternal(Internal)^, Header do begin
      {Compute page number and offset into page - returned in globals}
      L := VArrayAddress(Header, Row, Col);

      {Is page in RAM? If not, put it there now}
      PIR := RamIndex^[ArrayLI(L).Pnum];
      if PIR = NotInRAM then
        PIR := GetPage(ArrayLI(L).Pnum, @Self);

      {Update quasi-time}
      Inc(LRUcount);
      if LRUcount = 0 then
        ResetLRU(@Self);

      {Update LRU for this page, and pass back data value}
      with RamPages^[PIR]^ do begin
        Dirty := True;
        LRU := LRUcount;
        Move(Value, Data[ArrayLI(L).Pofs], ElSize);
      end;
    end;
  end;

  procedure VirtualRCArray.RetA(Row, Col : Word; var Value);
    {-Return the value of A[R,C] with Range Checking}
  var
    PIR : Word;
    P : Word;
    L : Longint;
  begin
    with TpVArrayInternal(Internal)^, Header do begin
      if Row >= Dimension.dRows then begin
        Error(epNonFatal+ecRowOutOfRange);                 {!!.03}
        Exit;
      end;
      if Col >= Dimension.dCols then begin
        Error(epNonFatal+ecColOutOfRange);                 {!!.03}
        Exit;
      end;

      {Compute page number and offset into page - returned in globals}
      L := VArrayAddress(Header, Row, Col);

      {Is page in RAM? If not, put it there now}
      PIR := RamIndex^[ArrayLI(L).Pnum];
      if PIR = NotInRAM then
        PIR := GetPage(ArrayLI(L).Pnum, @Self);

      {Update quasi-time}
      Inc(LRUcount);
      if LRUcount = 0 then
        ResetLRU(@Self);

      {Update LRU for this page, and pass back data value}
      with RamPages^[PIR]^ do begin
        LRU := LRUcount;
        Move(Data[ArrayLI(L).Pofs], Value, ElSize);
      end;
    end;
  end;

  procedure VirtualRCArray.SetA(Row, Col : Word; var Value);
    {-Set array element A[R,C] to value with Range Checking}
  var
    PIR : Word;
    P : Word;
    L : LongInt;
  begin
    with TpVArrayInternal(Internal)^, Header do begin

      if Row >= Dimension.dRows then begin
        Error(epNonFatal+ecRowOutOfRange);               {!!.03}
        Exit;
      end;
      if Col >= Dimension.dCols then begin
        Error(epNonFatal+ecColOutOfRange);               {!!.03}
        Exit;
      end;

      {Compute page number and offset into page - returned in globals}
      L := VArrayAddress(Header, Row, Col);

      {Is page in RAM? If not, put it there now}
      PIR := RamIndex^[ArrayLI(L).Pnum];
      if PIR = NotInRAM then
        PIR := GetPage(ArrayLI(L).Pnum, @Self);

      {Update quasi-time}
      Inc(LRUcount);
      if LRUcount = 0 then
        ResetLRU(@Self);

      {Update LRU for this page, and pass back data value}
      with RamPages^[PIR]^ do begin
        Dirty := True;
        LRU := LRUcount;
        Move(Value, Data[ArrayLI(L).Pofs], ElSize);
      end;
    end;
  end;

  procedure VirtualArray.SafeRetA(Row, Col : Word; var Value);
    {-Return the value of A[R,C] ignoring invalid Rows and Cols}
  var
    PIR : Word;
    P : Word;
    L : Longint;
  begin
    with TpVArrayInternal(Internal)^, Header do begin
      if (Row >= Dimension.dRows) or (Col >= Dimension.dCols) then
        Exit;

      {Compute page number and offset into page - returned in globals}
      L := VArrayAddress(Header, Row, Col);

      {Is page in RAM? If not, put it there now}
      PIR := RamIndex^[ArrayLI(L).Pnum];
      if PIR = NotInRAM then
        PIR := GetPage(ArrayLI(L).Pnum, @Self);

      {Update quasi-time}
      Inc(LRUcount);
      if LRUcount = 0 then
        ResetLRU(@Self);

      {Update LRU for this page, and pass back data value}
      with RamPages^[PIR]^ do begin
        LRU := LRUcount;
        Move(Data[ArrayLI(L).Pofs], Value, ElSize);
      end;
    end;
  end;

  procedure VirtualArray.SafeSetA(Row, Col : Word; var Value);
    {-Set array element A[R,C] to value ignoring invalid Rows and Cols}
  var
    PIR : Word;
    P : Word;
    L : LongInt;
  begin
    with TpVArrayInternal(Internal)^, Header do begin
      if (Row >= Dimension.dRows) or (Col >= Dimension.dCols) then
        Exit;

      {Compute page number and offset into page - returned in globals}
      L := VArrayAddress(Header, Row, Col);

      {Is page in RAM? If not, put it there now}
      PIR := RamIndex^[ArrayLI(L).Pnum];
      if PIR = NotInRAM then
        PIR := GetPage(ArrayLI(L).Pnum, @Self);

      {Update quasi-time}
      Inc(LRUcount);
      if LRUcount = 0 then
        ResetLRU(@Self);

      {Update LRU for this page, and pass back data value}
      with RamPages^[PIR]^ do begin
        Dirty := True;
        LRU := LRUcount;
        Move(Value, Data[ArrayLI(L).Pofs], ElSize);
      end;
    end;
  end;

  procedure VirtualArray.ClearA(var Value;
                                   Initialize : InitType);
    {-Reset all array values to Value}
  var
    B : Byte absolute Value;
    N : LongInt;
    I, J : Word;
    P : Word;
    ES : Word;
    Overhead : Word;
    Save : Byte;
    Bytes : {$IFDEF VirtualPascal} LongInt {$ELSE} Word {$ENDIF};
  begin
    with TpVArrayInternal(Internal)^, Header do begin
      Save := lFlags;
      {Don't waste time on updating disk index until done}
      ClearByteFlag(lFlags,lKeepDiskCurrent);
      if Initialize = FastInit then begin
        {Initialize in blocks by page}
        FillChar(RamPages^[0]^.Data, PageSize, B);
        {Write all the pages to disk}
        for P := 0 to Header.PageCount-1 do
          if not WritePage(0, P, @Self) then begin
            lFlags := Save;
            Exit;
          end;
        {Mark in-RAM pages as available}
        InitRamIndex(@Self);
      end
      else begin
        {init one page, then dump it}
        ES := ElSize;

        {Initialize first page one element at a time}
        for I := 0 to Pred(RowsInPage*ColsInPage) do
          with RamPages^[0]^ do
            Move(Value, Data[I*ES], ES);
        Overhead := SizeOf(VArrayHeader)+(SizeOf(LongInt)*PageCount);
        Seek(F,Overhead);

        {Dup the first page for each remaining page}
        for I := 1 to PageCount do begin
          BlockWrite(F, RamPages^[0]^.Data, PageSize, Bytes);
          J := IoResult;
          if Bytes <> PageSize then
            J := ecDeviceWrite;
          if J <> 0 then begin
            Error(epNonFatal+J);                           {!!.03}
            lFlags := Save;
            Exit;
          end;
        end;

        {set up the disk page index}
        for I := 0 to Pred(PageCount) do
          DiskIndex^[I] := Overhead + (LongInt(I) * PageSize);
        NextAvail := Overhead + (LongInt(PageCount) * PageSize);
      end;

      {Update index and buffers if requested}
      lFlags := Save;
      FlushA;
    end;
  end;

  procedure DisposePrimitive(Level, Pages : Word; A : VirtualArrayPtr);
    {-Deallocate RAM space for selected components of array}
  var
    P : Word;
  begin
    with A^, TpVArrayInternal(Internal)^, Header do begin
      if (Level >= 5) and (Pages > 0) then
        for P := 0 to Pred(Pages) do
          FreeMemCheck(RamPages^[P], PageSize+(SizeOf(PageRec)-SizeOf(DataPage)));
      if Level >= 4 then
        FreeMemCheck(RamPages, SizeOf(Pointer)*PagesInRam);
      if Level >= 3 then
        FreeMemCheck(DiskIndex, SizeOf(LongInt)*PageCount);
      if Level >= 2 then
        FreeMemCheck(RamIndex, SizeOf(Word)*PageCount);
      if Level >= 1 then
        FreeMemCheck(Internal, SizeOf(TpVArrayRec));
    end;
  end;

  function VAllocateA(RowsInPage : Word;
                      ColsInPage : Word;
                      PagesDown : Word;
                      PagesAcross : Word;
                      ElementSize : Word;
                      RamBytesForData : LongInt;
                      A : VirtualArrayPtr) : Boolean;
    {-Validate and allocate heap space for array}
  var
    RamIndexSize : LongInt;
    DiskIndexSize : LongInt;
    PageCount : LongInt;
    PageSize : LongInt;
    PagesInRamL : LongInt;
    PageOverHead : LongInt;
    P : Word;
  begin
    VAllocateA := False;
    with A^ do begin
      {Assure element size is valid}
      if ElementSize = 0 then begin
        Error(epFatal+ecElSizeIsZero);
        Exit;
      end;

      {Assure row and column dimensions are valid}
      if (PagesDown or RowsInPage = 0) or (PagesAcross or ColsInPage = 0) then begin
        Error(epFatal+ecBadDimensions);
        Exit;
      end;
      if LongInt(PagesDown)*RowsInPage > 65535 then begin
        Error(epFatal+ecBadDimensions);
        Exit;
      end;
      if LongInt(PagesAcross)*ColsInPage > 65535 then begin
        Error(epFatal+ecBadDimensions);
        Exit;
      end;

      {Assure page size is valid}
      PageOverHead := SizeOf(PageRec)-SizeOf(DataPage);
      PageSize := LongInt(RowsInPage)*ColsInPage*ElementSize;
      if PageSize+PageOverHead > MaxHeapBlock then begin
        Error(epFatal+ecBadDimensions);
        Exit;
      end;

      {Assure page index sizes are valid}
      PageCount := PagesDown*PagesAcross;
      RamIndexSize := SizeOf(Word)*PageCount;
      DiskIndexSize := SizeOf(LongInt)*PageCount;
      if DiskIndexSize > MaxHeapBlock then begin
        Error(epFatal+ecElementTooBig);
        Exit;
      end;

      {Compute number of pages to be kept in RAM}
      PagesInRamL := RamBytesForData div (SizeOf(Pointer)+PageSize+PageOverHead);
      {Don't allocate more pages in RAM than the whole array needs}
      if PagesInRamL > PageCount then
        PagesInRamL := PageCount;
      if PagesInRamL < 1 then begin
        Error(epFatal+ecLessThanOnePage);
        Exit;
      end;

      {Allocate the base array pointer}
      if not GetMemCheck(Internal, SizeOf(TpVArrayRec)) then begin
        Error(epFatal+ecOutOfMemory);
        Exit;
      end;

      with TpVArrayInternal(Internal)^ do begin
        RamIndex := NIL;
        DiskIndex := NIL;
        RamPages := NIL;

        {Initialize simple fields}
        PagesInRam := PagesInRamL;
        LRUcount := 0;

        {Initialize header}
        Header.RowsInPage := RowsInPage;
        Header.ColsInPage := ColsInPage;
        Header.PagesDown := PagesDown;
        Header.PagesAcross := PagesAcross;
        Header.ElSize := ElementSize;
        Header.PageSize := PageSize;
        Header.PageCount := PageCount;
        Header.ID := IdString;

        {Allocate ram index}
        if not GetMemCheck(RamIndex, RamIndexSize) then begin
          DisposePrimitive(1, 0, A);
          Error(epFatal+ecOutOfMemory);
          Exit;
        end;

        {Allocate disk index}
        if not GetMemCheck(DiskIndex, DiskIndexSize) then begin
          DisposePrimitive(2, 0, A);
          Error(epFatal+ecOutOfMemory);
          Exit;
        end;

        {Allocate in-RAM data pointers}
        if not GetMemCheck(RamPages, SizeOf(Pointer)*PagesInRam) then begin
          DisposePrimitive(3, 0, A);
          Error(epFatal+ecOutOfMemory);
          Exit;
        end;

        {Allocate in-RAM data pages}
        for P := 0 to Pred(PagesInRam) do
          if not GetMemCheck(RamPages^[P], PageSize+PageOverHead) then begin
            DisposePrimitive(5, P, A);
            Error(epFatal+ecOutOfMemory);
            Exit;
          end;

      end;
    end;
    VAllocateA := True;
  end;

  procedure VMakeAPrimitive(RowsInPage : Word;
                           ColsInPage : Word;
                           PagesDown : Word;
                           PagesAcross : Word;
                           ElementSize : Word;
                           FileName : string;
                           RamBytesForData : LongInt;
                           A : VirtualArrayPtr);
    {-Allocate array memory}
  var
    I : Word;
  begin
    {Validate and allocate heap space for array}
    if not VAllocateA(RowsInPage, ColsInPage, PagesDown,
                      PagesAcross, ElementSize,
                      RamBytesForData, A) then
      Exit;

    with A^, TpVArrayInternal(Internal)^ do begin
      ArrayFileName := FileName;
      BytesHeapToUse := RamBytesForData;

      Opened := False;

      {Create the disk file}
      Assign(F, FileName);
      Rewrite(F, 1);
      I := IoResult;
      if I <> 0 then begin
        DisposePrimitive(5, PagesInRam, A);
        Error(epFatal+I);
        Exit;
      end;
      Opened := True;

      {Initialize the disk index}
      with Header do begin
        NextAvail := LongInt(SizeOf(VArrayHeader))+SizeOf(LongInt)*PageCount;
        FillChar(DiskIndex^, SizeOf(LongInt)*PageCount, 0);
      end;

      {Write header and index to disk}
      if not WriteIndex(A) then
        Exit;

      {Initialize the in-RAM index and page descriptors}
      InitRamIndex(A);
    end;
  end;

  function VMakeA(Rows : Word;
                  Cols : Word;
                  ElementSize : Word;
                  FileName : string;
                  RamBytesForData : LongInt;
                  A : VirtualArrayPtr) : Boolean;
    {-Determine page structure and allocate array}
  var
    H : VArrayHeader;
    TotalBytes : LongInt;
    Pages : Word;
    PageOverHead : Word;
    AllDone : Boolean;
    MaxPageSize : Word;
  begin
    VMakeA := False;
    with A^ do begin
      {Be sure at least one element on each axis}
      if (Rows = 0) or (Cols = 0) then begin
        LastError := ecBadDimensions;
        Exit;
      end;

      {Be sure element size is valid}
      if ElementSize = 0 then begin
        LastError := ecElSizeIsZero;
        Exit;
      end;

      {Compute total bytes in array}
      TotalBytes := LongInt(Rows)*Cols*ElementSize;
      PageOverHead := SizeOf(PageRec)-SizeOf(DataPage);

      {Assure MemAvail is at least as big as RamBytesForData}
      if RamBytesForData > (9*MemAvail) div 10 then
        RamBytesForData := (9*MemAvail) div 10;

      {Determine largest page size we'll accept}
      MaxPageSize := MaxHeapBlock;
      if MaxPageSize > RamBytesForData shr 1 then
        MaxPageSize := RamBytesForData shr 1;

      if (((LongInt(Rows)*ElementSize)+PageOverhead) > MaxPageSize) and  {!!.02}
         (((LongInt(Cols)*ElementSize)+PageOverhead) > MaxPageSize) then {!!.02}
      begin                                                              {!!.02}
        LastError := ecLessThanOnePage;
        Exit;
      end;

      with H do begin

        {Store element size}
        ElSize := ElementSize;
        {Determine page organization}
        if TotalBytes+PageOverHead <= MaxPageSize then begin
          {Whole array fits into one page}
          RowsInPage := Rows;
          ColsInPage := Cols;
          PagesDown := 1;
          PagesAcross := 1;

        end else begin
          {Array larger than a page}
          {Get first estimate of number of pages required}
          Pages := DivUp(TotalBytes, MaxPageSize);

          {Iterate to find page organization with minimum waste that fits}
          repeat
            RowsInPage := DivUp(Rows, Pages);
            ColsInPage := DivUp(Cols, Pages);

            {Determine whether to divide horizontally or vertically}
            if ((LongInt(RowsInPage)*Pages-Rows)*Cols <=
              (LongInt(ColsInPage)*Pages-Cols)*Rows)
            or (LongInt(RowsInPage)*ElSize > MaxPageSize) then begin
              {Divide up the rows}
              ColsInPage := Cols;
              PagesAcross := 1;
              PagesDown := Pages;
            end else begin
              {Divide up the columns}
              RowsInPage := Rows;
              PagesDown := 1;
              PagesAcross := Pages;
            end;

            AllDone := (LongInt(RowsInPage)*ColsInPage*ElSize+PageOverHead <= MaxPageSize);
            if not(AllDone) then
              {Add another page}
              Inc(Pages);
            if Pages = 0 then begin                     {!!.10}
              LastError := ecLessThanOnePage;           {!!.10}
              Exit;                                     {!!.10}
            end;                                        {!!.10}
          until AllDone;
        end;

        {Allocate the array}
        VMakeAPrimitive(RowsInPage, ColsInPage, PagesDown, PagesAcross,
                       ElSize, FileName, RamBytesForData, A);
        VMakeA := LastError = 0;
      end;
    end;
  end;

  procedure VirtualArray.CloseA;
    {-Close Virtual Array file}
  var
    I : Word;
  begin
    with TpVArrayInternal(Internal)^ do
      if Opened then begin
        Close(TpVArrayInternal(Internal)^.F);
        I := IoResult;
        if I <> 0 then
          Error(epFatal+I)
        else
          Opened := False;
      end;
  end;

  destructor VirtualArray.Done;
    {-Deallocate an array}
  var
    I : Word;
  begin
    if Internal = NIL then
      Exit;
    with TpVArrayInternal(Internal)^ do begin
      if Opened then begin
        if ByteFlagIsSet(lFlags,lDeleteFile) then begin
          Close(F);
          I := IoResult;
          if I = 0 then
            {File was closed in StoreA, safe to erase here}
            Erase(F)
          else
            Error(epFatal+I);
        end
        else begin
          {Store the array in case it is wanted later}
          FlushA;
          CloseA;
        end;
      end;

      {Deallocate its space}
      DisposePrimitive(5, PagesInRam, @Self);
    end;
  end;

  procedure VirtualArray.StoreA(FileName : String);
    {-Store an array to disk in VARRAY format}
  var
    I, ErrorCode : Word;
    BufferSize : Word;
    Buffer    : Pointer;
    Same      : Boolean;

    function Reopen(var F : File; Name : String) : Boolean;
    begin
      Assign(F, Name);
      Reset(F, 1);
      Reopen := IoResult = 0;
    end;

  begin
    with TpVArrayInternal(Internal)^ do begin
      FlushA;                          {make sure all changes are flushed}
      if LastError <> 0 then
        Exit;
      Close(F);                        {close the file}
      I := IoResult;
      if I <> 0 then begin
        Error(epNonFatal+I);
        Exit;
      end;
      {determine whether the Name specified refers to the same file we just
       closed}
      Same := SameFile(ArrayFileName,FileName,ErrorCode);
      case ErrorCode of
        1 : begin    {ArrayFileName doesn't exist}
              Error(epNonFatal+ecFileNotFound);
              Exit;
            end;
        2 : begin    {invalid pathname}
              Error(epNonFatal+ecPathNotFound);
              Exit;
            end;
      end;
      {Different or nonexistent file, so we need to copy}
      if (not Same) then begin
        if MaxAvail < LongInt($FFF1) then
          BufferSize := Word(MaxAvail)
        else
          BufferSize := $FFF1;
        if not GetMemCheck(Buffer,BufferSize) then begin
          if Reopen(F,ArrayFileName) then
            Opened := True;
          Error(epNonFatal+ecOutOfMemory);
          Exit;
        end;
        {copy the VArray file into the new file}
        ErrorCode := CopyFile(ArrayFileName, FileName, Buffer, BufferSize);
        FreeMemCheck(Buffer,BufferSize);
        if ErrorCode <> 0 then
          Error(epNonFatal+ErrorCode);
      end;
      {Reopen the Array file}
      if Reopen(F,ArrayFileName) then
        Opened := True;
    end;
  end;

  constructor VirtualArray.Init(Rows, Cols : Word; ElementSize : Word;
                                    FileName : String; HeapToUse : LongInt;
                                    ArrayOptions : Byte);
    {-create a new virtual array}
  var
    SaveBeep : Boolean;                     {!!.03}
  begin
    SaveBeep := DefBeepOnError;             {!!.03}
    DefBeepOnError := False;                {!!.03}
    AbstractArray.Init(Rows,Cols,ElementSize,HeapToUse,ArrayOptions);
    TypeOfLArray := lVirtualArray;
    if not VMakeA(Rows,Cols,ElementSize,FileName,HeapToUse,@Self) then begin
      InitStatus := LastError;
      DefBeepOnError := SaveBeep;           {!!.03}
      Fail;
    end;
    DefBeepOnError := SaveBeep;             {!!.03}
  end;

  constructor PrimitiveArray.Init(RowsInPage   : Word;
                                  ColsInPage   : Word;
                                  PagesDown    : Word;
                                  PagesAcross  : Word;
                                  ElementSize  : Word;
                                  FileName     : String;
                                  HeapToUse    : LongInt;
                                  ArrayOptions : Byte);
    {-create a new virtual array with full control over page structure}
  var
    SaveBeep : Boolean;                     {!!.03}
  begin
    SaveBeep := DefBeepOnError;             {!!.03}
    DefBeepOnError := False;                {!!.03}
    if not AbstractArray.Init(RowsInPage * PagesDown,ColsInPage * PagesAcross,
                              ElementSize, HeapToUse, ArrayOptions) then begin
      DefBeepOnError := SaveBeep;           {!!.03}
      Fail;
    end;
    TypeOfLArray := lVirtualArray;
    VMakeAPrimitive(RowsInPage, ColsInPage, PagesDown, PagesAcross,
                    ElementSize,FileName,HeapToUse,@Self);
    if LastError <> 0 then begin
      InitStatus := LastError;
      DefBeepOnError := SaveBeep;           {!!.03}
      Fail;
    end;
    DefBeepOnError := SaveBeep;           {!!.03}
  end;

  constructor VirtualArray.LoadA(FileName : string; HeapToUse : LongInt;
                                 ArrayOptions : Byte);
    {-Allocate and read array from disk in VARRAY format}
  var
    I, Bytes : Word;
    DiskIndexSize : Word;
    CalcCols,CalcRows : Word;
    H : VArrayHeader;
    OldH : OldVArrayHeader absolute H;
    lF : File;
    SaveBeep : Boolean;                     {!!.03}
    SaveID : String[6];                     {!!.03}
    SaveNext : LongInt;                     {!!.03}

    procedure UnDo(FileIsOpen : Boolean; ErrorCode : Word);
      {Close file(s) }
    begin
      if FileIsOpen then begin
        Close(TpVArrayInternal(Internal)^.F);
        Bytes := IoResult;
      end;
      Close(lF);
      Bytes := IoResult;
      Error(ErrorCode);
      DefBeepOnError := SaveBeep;           {!!.03}
      InitStatus := LastError;
    end;

  begin
    SaveBeep := DefBeepOnError;             {!!.03}
    DefBeepOnError := False;                {!!.03}
    AbstractArray.LoadA(HeapToUse, ArrayOptions);
    TypeOfLArray := lVirtualArray;

    Assign(lF,FileName);               {open an array file}
    Reset(lF,1);
    I := IoResult;
    if I <> 0 then begin
      UnDo(False, epFatal+I);
      Fail;
    end;

    {read VArray header}
    BlockRead(lF,H,SizeOf(VArrayHeader), Bytes);
    I := IoResult;
    if Bytes <> SizeOf(VArrayHeader) then
      I := ecDeviceRead;
    if I <> 0 then begin
      UnDo(False,epFatal+I);
      Fail;
    end;
    Close(lF);
    I := IoResult;
    if I <> 0 then begin
      UnDo(False,epFatal+I);
      Fail;
    end;

    {Check for proper file format}
    if not ((H.ID = IdString) or (H.ID = VArrayID)) then begin
      if (OldH.ID <> VArrayID) then begin           {!!.03}
        UnDo(False, epFatal+ecNotLArrayFile);
        Fail;
      end                                           {begin !!.03}
      else begin
        SetByteFlag(lFlags, lTpVArrayFormat);
        SaveID := OldH.ID;
        SaveNext := OldH.NextAvail;
        H.ID := SaveID;
        H.NextAvail := SaveNext;
      end;                                          {end !!.03}
    end;

    with H do begin
      CalcCols := ColsInPage * PagesAcross;
      CalcRows := RowsInPage * PagesDown;
    end;

    with Dimension do begin
      dRows := CalcRows;
      dCols := CalcCols;
    end;


    with H do
      {Validate and allocate heap space for array}
      if not VAllocateA(RowsInPage, ColsInPage, PagesDown,
                        PagesAcross, ElSize,
                        HeapToUse, @Self) then begin            {!!.02}
        Undo(False, LastError);                                 {!!.02}
        I := IoResult;                                          {!!.02}
        Fail;
      end;                                                      {!!.02}

    with TpVArrayInternal(Internal)^ do begin
      ArrayFileName := FileName;
      BytesHeapToUse := HeapToUse;
      Opened := False;
      Header.NextAvail := H.NextAvail;                          {!!.03}

      {Create the disk file}
      Assign(F, FileName);
      Reset(F, 1);
      I := IoResult;
      if I <> 0 then begin
        UnDo(False, epFatal+I);
        DisposePrimitive(5, PagesInRam, @Self);
        Fail;
      end;
      Opened := True;
      DiskIndexSize := SizeOf(LongInt)*H.PageCount;
      Seek(F,SizeOf(VArrayHeader));
      BlockRead(F,DiskIndex^,DiskIndexSize,Bytes);
      I := IoResult;
      if Bytes <> DiskIndexSize then
        I := ecDeviceRead;
      if I <> 0 then begin
        UnDo(True,epFatal+I);
        DisposePrimitive(5, PagesInRam, @Self);
        Fail;
      end;
    end;

    {Initialize the in-RAM index and page descriptors}
    InitRamIndex(@Self);
    DefBeepOnError := SaveBeep;             {!!.03}
  end;

  constructor VirtualRCArray.Init(Rows, Cols : Word; ElementSize : Word;
                                     FileName : String; HeapToUse : LongInt;
                                     ArrayOptions : Byte);
    {-create a new virtual array with Range checking for SetA and RetA}
  begin
    if not VirtualArray.Init(Rows,Cols,ElementSize,FileName,HeapToUse,
                                ArrayOptions or lRangeCheck) then
      Fail;
  end;

  constructor VirtualRCArray.LoadA(FileName : string; HeapToUse : LongInt;
                                   ArrayOptions : Byte);
    {-Allocate and read array from disk in VARRAY format with Range checking
      for SetA and RetA}
  begin
    if not VirtualArray.LoadA(FileName, HeapToUse,
                              ArrayOptions or lRangeCheck) then
      Fail;
  end;

  function VirtualArray.GetElementSize : Word;
    {-Return the element size for the array}
  begin
    GetElementSize := TpVArrayInternal(Internal)^.Header.ElSize;
  end;
